import * as taskLib from 'azure-pipelines-task-lib/task';
import * as path from 'path';
import { v4 as uuidv4 } from 'uuid';
import util = require("./util.js");

const VAR_SERVICE_NAME = 'WSService';
const VAR_PRODUCT_NAME = 'ProductName';
const VAR_PROJECT_NAME = 'ProjectName';
const VAR_FOLDER = 'Folder';
const VAR_PREFORM_SCAN = 'PreformScan'
const VAR_DELETE_PROJECT_DAYS = 'DeleteProjectAfterDays'
const VAR_SCAN_EXPIRED_DAYS = 'ScanExpired'

export class Configuration {
    //Download Agent
    agentUrl: string = "";
    downloadAgentDays: number = 0;

    //List of branches to scan(long term branch)
    listOfBranches: string = "";

    //WS API
    deleteProjectDays: number = 0;
    apiBaseURL: string = "";
    apiKey: string = "";
    userKey: string = "";
    scanType: string = "";

    //Project Details
    productName: string = "";
    projectName: string = "";
    sourceControlType: string = "";
    gitBranchName: string = "";

    //Scanner
    scanFolder: string = "";
    config: string = "";
    configFile: string = "";
    packagesFilePattern: string = "";
    scanExpired: number = 0;

    Success: boolean = false;

    constructor() {
        this.Success = false
        let endpointAuthorization = this.GetEndpointAuthorization();
        if (!endpointAuthorization) {
            return;
        }

        //Download Agent
        this.UpdateDownloadAgentParams(endpointAuthorization);

        //List of branches to scan(long term branch)
        this.listOfBranches = taskLib.getInput(VAR_PREFORM_SCAN, false) || '';

        //WS API
        this.UpdateApiParams(endpointAuthorization); 

        //Project Details
        this.UpdateProjectParams();

        //Scanner
        this.UpdateScannerParams(endpointAuthorization);

        //write config details to file, exit if somethings go wrong
        if(!util.writeToFile(this.configFile, this.config)){
            taskLib.error(taskLib.loc("missingConfig"))
            return
        }

        this.Success = true;
    }

    private GetEndpointAuthorization(){
        var input_serviceDetails = taskLib.getInput(VAR_SERVICE_NAME, true);
        if(!input_serviceDetails){
            taskLib.error(taskLib.loc("missingService"))
            return undefined 
        }
    
        let endpointAuthorization = taskLib.getEndpointAuthorization(input_serviceDetails, true);
    
        if(!endpointAuthorization){
            taskLib.error(taskLib.loc("missingServiceDetailes"))
            return undefined
        }
    
        return endpointAuthorization;
    }
    
    private UpdateScannerParams(endpointAuthorization: taskLib.EndpointAuthorization) {
        this.scanFolder = taskLib.getInput(VAR_FOLDER, true) || '';
        this.config = endpointAuthorization.parameters['ConfigAgent'] || '';
        this.configFile = path.join(taskLib.getVariable('agent.tempDirectory') || '', `wss-unified-agent-${uuidv4()}.config`);
        this.packagesFilePattern = endpointAuthorization.parameters['PackagesFilePattern'] || '';
        this.scanExpired = parseInt(taskLib.getInput(VAR_SCAN_EXPIRED_DAYS) || '') || 30;
    }

    private UpdateProjectParams() {
        this.productName = taskLib.getInput(VAR_PRODUCT_NAME, true) || '';
        this.projectName = taskLib.getInput(VAR_PROJECT_NAME, true) || '';
        this.sourceControlType = taskLib.getVariable('BUILD_REPOSITORY_PROVIDER') || 'UNKNOWN';
        this.gitBranchName = taskLib.getVariable('BUILD_SOURCEBRANCHNAME') || '';
    }

    private UpdateApiParams(endpointAuthorization: taskLib.EndpointAuthorization) {
        this.deleteProjectDays = parseInt(taskLib.getInput(VAR_DELETE_PROJECT_DAYS) || '') || 7;
        this.apiBaseURL = endpointAuthorization.parameters['APIBaseURL'] || 'https://saas.whitesourcesoftware.com/api/v1.3';
        this.apiKey = endpointAuthorization.parameters['APIKey'] || '';
        this.userKey = endpointAuthorization.parameters['UserKey'] || '';
        this.scanType = endpointAuthorization.parameters['ScanType'] || "ScanLongTermBranches";
    }

    private UpdateDownloadAgentParams(endpointAuthorization: taskLib.EndpointAuthorization) {
        this.agentUrl = endpointAuthorization.parameters['AgentUrl'] || "https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar";
        this.downloadAgentDays = parseInt(endpointAuthorization.parameters['DownloadAgentDays'] || '') || 7;
    }
}
