import util = require("./util.js");

function apiRequest(url: string, body: any): Promise<string> {
    return new Promise((resolve, reject) => {
        var unirest = require('unirest');
        
        unirest('POST', url)
        .headers({
            'Content-Type': 'application/json'
        })
        .send(JSON.stringify(body))
        .end(function (res: any) { 
            if (res.error) 
                reject(new Error(res.error)); 
            else if(!res.body)
                reject(new Error(`taskLib.loc('dataOnPathNotExist')`)); 
            else 
                resolve(JSON.stringify(res.body));
        });
    })
}

export async function getProductToken(url: string, orgToken: string, userKey: string, productName: string) {
    let body = {
        "requestType" : "getAllProducts",
        "userKey": userKey,
        "orgToken" : orgToken
    };
        
    let res = await apiRequest(url, body);
    let obj = JSON.parse(res)

    if(!('products' in obj))
        return undefined

    try {
        for(let product of obj.products){
            if(product.productName == productName || product.productToken == productName){
                return product.productToken
            }
        }    
    }
    catch (e) { 
    }

    return undefined
}

export async function getAllProjects(url: string, productToken: string, userKey: string) {
    let body = {
        "requestType" : "getAllProjects",
        "userKey": userKey,
        "productToken" : productToken
    }
        
    return apiRequest(url, body);
}

export async function getProjectInventory(url: string, userKey: string, projectToken: string) {
    let body = {
        "requestType" : "getProjectInventory",
        "userKey": userKey,
        "projectToken" : projectToken,
        "includeInHouseData" : false
    }
        
    return apiRequest(url, body);
}

export async function getProjectVulnerabilityReport(url: string, userKey: string, projectToken: string) {
    let body = {
        "requestType" : "getProjectVulnerabilityReport",
        "userKey": userKey,
        "projectToken" : projectToken,
        "format" : "json"
    }

    return apiRequest(url, body);
}

export async function getProjectVitals(url: string, userKey: string, projectToken: string) {
    let body = {
        "requestType" : "getProjectVitals",
        "userKey": userKey,
        "projectToken" : projectToken
    }

    return apiRequest(url, body);
}

export async function deleteProject(url: string, userKey: string, productToken: string, projectToken: string) {
    let body = {
        "requestType" : "deleteProject",
        "userKey": userKey,
        "productToken" : productToken,
        "projectToken": projectToken
    }

    return await apiRequest(url, body);
}

export async function getProjectToken(url: string, userKey: string, productToken: string, projectName: string) {
    let res = await getAllProjects(url, productToken, userKey)
    let obj = JSON.parse(res)

    if(!('projects' in obj))
        return undefined

    try{
        for(let project of obj.projects){
            if(project.projectName == projectName || project.projectToken == projectName){
                return project.projectToken
            }
        }
    }
    catch (e) { 
    }

    return undefined
}

export async function deleteProjectScanedBeforeDays(url: string, userKey: string, productToken: string, days: number, dryRun: boolean, selectorRegex?: string, projectNameFilter?: string) {
    const today = new Date();
    
    let res = await getAllProjects(url, productToken, userKey)
    let resObject = JSON.parse(res)

    if(!('projects' in resObject))
        return

    let projects = resObject.projects
    let deletedProjects: number = 0
    let numberOfProjects: number = 0

    if(!selectorRegex)
        selectorRegex = ''
    const regex = new RegExp(selectorRegex); 

    var funcs = []
    for(let project of projects){
        let projectName: string = project.projectName

        if(selectorRegex.length > 0 && !regex.test(projectName))
            continue;

        //Maybe it's not nessery ???? --> use RegEx
        if(projectNameFilter && !projectName.startsWith(projectNameFilter, 0))
            continue

        console.log(`Checking ${projectName} ...`);
        numberOfProjects++
        let projectToken: string = project.projectToken
           
        funcs.push(deleteProjectFunc(projectToken, projectName))
    }

    await Promise.all(funcs)

    console.log(`There are ${projects.length} projects at the product.`)
    console.log(`${numberOfProjects} projects found in search.`)
    if(numberOfProjects > deletedProjects)
        console.log(`Skipped on ${numberOfProjects-deletedProjects} projects (day condition).`)
    console.log(`${deletedProjects} projects deleted from the WhiteSource platform.`)
    //console.log(`${deletedProjects} of ${numberOfProjects} projects deleted from the WhiteSource platform.`)

    async function deleteProjectFunc(projectToken: string, name: string) {
        let resPI = await getProjectInventory(url, userKey, projectToken);
        let project = JSON.parse(resPI);

        var dateString = project.projectVitals.lastUpdatedDate;
        let lastUpdatedDate = new Date(dateString);

        var diffDays = util.daysBetween(lastUpdatedDate, today);

        if(!dryRun){
            if (diffDays > days) {
                try {
                    console.log(`Delete ${name} ...`);
                    await deleteProject(url, userKey, productToken, projectToken);
                    deletedProjects++;
                    console.log(`Delete ${name} ...Done`);
                }
                catch (e) {
                }
            }
        }
        else{
            if (diffDays > days) {
                console.log(`DryRun - Delete ${name} ...`);
                deletedProjects++;
            }
            else{
                console.log(`DryRun - Can't Delete ${name} ...Days since last scan = ${diffDays}`);
            }
        }
    }
}
