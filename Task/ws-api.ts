import util = require("./util.js");

function apiRequest(url: string, body: any): Promise<string> {
    return new Promise((resolve, reject) => {
        var unirest = require('unirest');
        
        unirest('POST', url)
        .headers({
            'Content-Type': 'application/json'
        })
        .send(JSON.stringify(body))
        .end(function (res: any) { 
            if (res.error) 
                reject(new Error(res.error)); 
            else if(!res.body)
                reject(new Error(`taskLib.loc('dataOnPathNotExist')`)); 
            else 
                resolve(JSON.stringify(res.body));
        });
    })
}

export async function getProductToken(url: string, orgToken: string, userKey: string, productName: string) {
    let body = {
        "requestType" : "getAllProducts",
        "userKey": userKey,
        "orgToken" : orgToken
    };
        
    let res = await apiRequest(url, body);
    let obj = JSON.parse(res)

    if(!('products' in obj))
        return undefined

    try {
        for(var i = 0; i < obj.products.length; ++i){
            if(obj.products[i].productName == productName || obj.products[i].productToken == productName){
                return obj.products[i].productToken
            }
        }    
    }
    catch (e) { 
    }

    return undefined
}

export async function getAllProjects(url: string, productToken: string, userKey: string) {
    let body = {
        "requestType" : "getAllProjects",
        "userKey": userKey,
        "productToken" : productToken
    }
        
    return await apiRequest(url, body);
}

export async function getProjectInventory(url: string, userKey: string, projectToken: string) {
    let body = {
        "requestType" : "getProjectInventory",
        "userKey": userKey,
        "projectToken" : projectToken,
        "includeInHouseData" : false
    }
        
    return await apiRequest(url, body);
}

export async function getProjectVulnerabilityReport(url: string, userKey: string, projectToken: string) {
    let body = {
        "requestType" : "getProjectVulnerabilityReport",
        "userKey": userKey,
        "projectToken" : projectToken,
        "format" : "json"
    }

    return await apiRequest(url, body);
}

export async function getProjectVitals(url: string, userKey: string, projectToken: string) {
    let body = {
        "requestType" : "getProjectVitals",
        "userKey": userKey,
        "projectToken" : projectToken
    }

    return await apiRequest(url, body);
}

export async function deleteProject(url: string, userKey: string, productToken: string, projectToken: string) {
    let body = {
        "requestType" : "deleteProject",
        "userKey": userKey,
        "productToken" : productToken,
        "projectToken": projectToken
    }

    return await apiRequest(url, body);
}

export async function getProjectToken(url: string, userKey: string, productToken: string, projectName: string) {
    let res = await getAllProjects(url, productToken, userKey)
    let obj = JSON.parse(res)

    if(!('projects' in obj))
        return undefined

    try{
        for(var i = 0; i < obj.projects.length; ++i){
            if(obj.projects[i].projectName == projectName || obj.projects[i].projectToken == projectName){
                return obj.projects[i].projectToken
            }
        }
    }
    catch (e) { 
    }

    return undefined
}

export async function deleteProjectScanedBeforeDays(url: string, userKey: string, productToken: string, days: number, projectName?: string) {
    const today = new Date();
    
    let res = await getAllProjects(url, productToken, userKey)
    let resObject = JSON.parse(res)

    if(!('projects' in resObject))
        return

    let projects = resObject.projects
    let deletedProjects: number = 0
    let numberOfProjects: number = 0

    var funcs = []
    for(var i = 0; i < projects.length; ++i){
        let name: string = projects[i].projectName

        if(projectName && !name.startsWith(projectName, 0))
            continue

        console.log(`Checking ${name} ...`);
        numberOfProjects++
        let projectToken: string = projects[i].projectToken
           
        funcs.push(deleteProjectFunc(projectToken, name))
    }

    await Promise.all(funcs)
    console.log(`${deletedProjects} of ${numberOfProjects} projects deleted from the WS system.`)

    async function deleteProjectFunc(projectToken: string, name: string) {
        let resPI = await getProjectInventory(url, userKey, projectToken);
        let project = JSON.parse(resPI);

        var dateString = project.projectVitals.lastUpdatedDate;
        let lastUpdatedDate = new Date(dateString);

        var diffDays = util.daysBetween(lastUpdatedDate, today);

        if (diffDays > days) {
            try {
                console.log(`Delete ${name} ...`);
                await deleteProject(url, userKey, productToken, projectToken);
                deletedProjects++;
                console.log(`Delete ${name} ...Done`);
            }
            catch (e) {
            }
        }
    }
}
