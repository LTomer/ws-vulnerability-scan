import * as taskLib from 'azure-pipelines-task-lib/task';
import fs = require('fs');

export function readFromFile(filename: string){
    if (!taskLib.stats(filename).isFile()) 
        throw new Error(taskLib.loc('invalidFilePath', filename));

    return fs.readFileSync(filename, 'utf8').toString().split('\n');
}

export function writeToFile(filename: string, value: string) {
    try{
        let buffer = Buffer.from(value)
        fs.writeFileSync(filename, buffer)
        taskLib.debug(taskLib.loc("saveConfigFile"))
        return true
    }
    catch(error){
        taskLib.error(String(error));
        taskLib.setResult(taskLib.TaskResult.Failed, taskLib.loc("writeToFileFailed"));
        return false
    }
}

export function daysSince(date: string) {
    try{
        let from = new Date(date)
        const today = new Date();
        
        return daysBetween(from, today)
    }
    catch(error){
        console.error(error)
        return -1
    }
}

export function daysBetween(fromDate: Date, toDate: Date) {
    try{
        const msecInDay = 1000 * 60 * 60 * 24;
        var diff_in_msec = Math.abs(toDate.getTime() - fromDate.getTime());
        return Math.floor(diff_in_msec / msecInDay); //calculate number of days between dates
    }
    catch(error){
        console.error(error)
        return -1
    }
}

//Replace env var in the content with the relevant value 
export function ReplaceMacroSyntaxVariables(content: string) {
    var envVerPattern = /\$\([0-9A-Za-z_.]*\)/g
    var matches = content.match(envVerPattern) || []

    matches.forEach(element => {
        let varName = element.substring(2, element.length - 1)
        let value = taskLib.getVariable(varName) 
        if(value != undefined)
            content = content.replace(element, value)
       })

    return content;
}
